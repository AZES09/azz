<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Fourier Series Drawing</title>
<style>
body {
margin: 0;
overflow: hidden;
background-color: black;
color: white;
}
#controls {
position: absolute;
top: 10px;
left: 10px;
z-index: 10;
}
.control-group {
margin-bottom: 10px;
}
</style>
</head>
<body>
<div id="controls">
<div class="control-group">
<input type="text" id="svg-url" value="https://raw.githubusercontent.com/wushangyuen/drawing_with_Discrete_Fourier_transform/main/sam.svg" placeholder="Enter SVG URL">
<button id="load-svg">Load SVG</button>
</div>
<div class="control-group">
<label for="circle-slider">Number of Circles:</label>
<input type="range" id="circle-slider" min="10" max="1000" value="500">
<span id="circle-value">500</span>
</div>
<div class="control-group">
<label for="speed-slider">Animation Speed:</label>
<input type="range" id="speed-slider" min="1" max="100" value="25">
<span id="speed-value">25</span>
</div>
<div class="control-group">
<label for="stroke-slider">Stroke Weight:</label>
<input type="range" id="stroke-slider" min="1" max="10" value="1">
<span id="stroke-value">1</span>
</div>
<div class="control-group">
<label for="line-color">Path Line Color:</label>
<input type="color" id="line-color" value="#ffffff">
</div>
<div class="control-group">
<label for="circle-color">Circle Color:</label>
<input type="color" id="circle-color" value="#ffffff">
</div>
<div class="control-group">
<label for="fill-color">Background Color:</label>
<input type="color" id="fill-color" value="#000000">
</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
<script>
let N_of_in = 8000;
let N_of_circles = 500;
let N_of_out = 100000;
let vbox = { width: 1080 };
let prepared = false;
let follow = true;
let DFT;
let leng;
let path;
let K;
let t = 0;
let R = [];

function hypot([re, im]) {
return Math.hypot(re, im);
}

function expim(im) {
return [Math.cos(im), Math.sin(im)];
}

function add([rea, ima], [reb, imb]) {
return [rea + reb, ima + imb];
}

function mul([rea, ima], [reb, imb]) {
return [rea * reb - ima * imb, rea * imb + ima * reb];
}

function setup() {
createCanvas(1080, 720);
loadSVG(document.getElementById('svg-url').value);

document.getElementById('load-svg').addEventListener('click', async () => {
await loadSVG(document.getElementById('svg-url').value);
});

document.getElementById('circle-slider').addEventListener('input', (event) => {
N_of_circles = parseInt(event.target.value);
document.getElementById('circle-value').textContent = N_of_circles;
prepared = false;
loadSVG(document.getElementById('svg-url').value);
});

document.getElementById('speed-slider').addEventListener('input', (event) => {
t = parseInt(event.target.value);
document.getElementById('speed-value').textContent = t;
});

document.getElementById('stroke-slider').addEventListener('input', (event) => {
document.getElementById('stroke-value').textContent = event.target.value;
});
}

async function loadSVG(url) {
let svg = await fetch(url)
.then(response => response.text())
.then(text => (new DOMParser()).parseFromString(text, "image/svg+xml"))
.then(svg => svg.documentElement);

vbox = svg.viewBox.baseVal;
let path2 = svg.querySelector("path");
leng = path2.getTotalLength();
path = Array.from({ length: N_of_in }, (_, i) => {
const { x, y } = path2.getPointAtLength(i / N_of_in * leng);
return [x - vbox.width / 2, y - vbox.height / 2];
});

K = Int16Array.from({ length: N_of_circles }, (_, i) => (1 + i >> 1) * (i & 1 ? -1 : 1));

DFT = Array.from(K, k => {
let x = [0, 0];
for (let i = 0, N_of_in = path.length; i < N_of_in; ++i) {
x = add(x, mul(path[i], expim(k * i / N_of_in * 2 * -Math.PI)));
}
return [x[0] / N_of_in, x[1] / N_of_in];
});

prepared = true;
}

function draw() {
background(document.getElementById('fill-color').value);

if(prepared) {
const zoom_rate = document.getElementById('slider') ? document.getElementById('slider').value / 10 * width / vbox.width : 1;
const a = t * 2 / N_of_out * Math.PI;

let cpoint = [0, 0];
for (let i = 0; i < N_of_circles; ++i) {
cpoint = add(cpoint, mul(DFT[i], expim(a * K[i])));
}

translate(width / 2, height / 2);
scale(zoom_rate);
if(follow) translate(-cpoint[0], -cpoint[1]);

// Draw circles
stroke(document.getElementById('circle-color').value);
strokeWeight(parseInt(document.getElementById('stroke-slider').value));
noFill();
for (let i = 0, cpoint = [0, 0]; i < N_of_circles; ++i) {
const r = hypot(DFT[i]);
ellipse(cpoint[0], cpoint[1], r * 2);
cpoint = add(cpoint, mul(DFT[i], expim(a * K[i])));
}

// Draw line segments
stroke(231, 0, 180, 80);
strokeWeight(1);
for (let i = 0, cpoint = [0, 0]; i < N_of_circles; ++i) {
let prevP = cpoint;
cpoint = add(cpoint, mul(DFT[i], expim(a * K[i])));
line(...prevP, ...cpoint);
}

// Draw path
beginShape();
noFill();
stroke(document.getElementById('line-color').value);
if (R.length < N_of_out) R.push(cpoint);
for (let i = 1, n = R.length; i < n; ++i) {
vertex(...R[i]);
}
endShape();
t += parseInt(document.getElementById('speed-slider').value);
}
}

function keyPressed() {
if (key === "q") {
follow = !follow;
}
}
</script>
</body>
</html>
